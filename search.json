[{"title":"markdown语法","url":"/2022/04/27/markdown%E8%AF%AD%E6%B3%95/","content":"本篇文章主要介绍markdown语法，该文章为转载\n原文：https://www.jianshu.com/p/191d1e21f7ed\n一、标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。\n示例：\n# 一级标题## 二级标题### 三级标题\n\n效果如下：\n这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题\n二、字体\n加粗\n\n要加粗的文字左右分别用两个*号包起来\n\n斜体\n\n要倾斜的文字左右分别用一个*号包起来\n\n斜体加粗\n\n要倾斜和加粗的文字左右分别用三个*号包起来\n\n删除线\n\n要加删除线的文字左右分别用两个~~号包起来\n示例：\n**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~\n\n效果如下：\n这是加粗的文字这是倾斜的文字*这是斜体加粗的文字*这是加删除线的文字\n\n三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…貌似可以一直加下去，但没神马卵用\n示例：\n&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;这是引用的内容\n\n效果如下：\n\n这是引用的内容\n\n这是引用的内容\n\n这是引用的内容\n\n\n\n\n四、分割线三个或者三个以上的 - 或者 * 都可以。\n示例：\n-------********\n\n效果如下：可以看到，显示效果是一样的。\n\n\n\n\n五、图片语法：\n![图片alt](图片地址 &#x27;&#x27;图片title&#x27;&#x27;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n\n示例：\n![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)\n\n效果如下：\n\n\n上传本地图片直接点击导航栏的图片标志，选择图片即可\nmarkdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。markdown图床\n\n六、超链接语法：\n[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加\n\n示例：\n[简书](http://jianshu.com)[百度](http://baidu.com)\n\n效果如下：\n简书百度\n注：如果想要在新页面中打开的话可以用html语言的a标签代替。\n&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;\n\n\n七、列表无序列表语法：无序列表用 - + * 任何一种都可以\n- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格\n\n效果如下：\n\n列表内容\n列表内容\n列表内容\n\n有序列表语法：数字加点\n1. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格\n\n效果如下：\n\n列表内容\n列表内容\n列表内容\n\n列表嵌套上一级和下一级之间敲三个空格即可\n\n一级无序列表内容\n二级无序列表内容\n二级无序列表内容\n二级无序列表内容\n\n\n一级无序列表内容\n二级有序列表内容\n二级有序列表内容\n二级有序列表内容\n\n\n\n\n一级有序列表内容\n二级无序列表内容\n二级无序列表内容\n二级无序列表内容\n\n\n一级有序列表内容\n二级有序列表内容\n二级有序列表内容\n二级有序列表内容\n\n\n\n\n八、表格语法：\n表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略\n\n示例：\n姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟\n\n效果如下：\n\n\n\n姓名\n技能\n排行\n\n\n\n刘备\n哭\n大哥\n\n\n关羽\n打\n二哥\n\n\n张飞\n骂\n三弟\n\n\n\n九、代码语法：单行代码：代码之间分别用一个反引号包起来\n`代码内容`\n\n代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行\n(```)  代码...  代码...  代码...(```)\n\n\n注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。\n\n示例：\n单行代码\n`create database hero;`\n\n代码块\n(```)    function fun()&#123;         echo &quot;这是一句非常牛逼的代码&quot;;    &#125;    fun();(```)\n\n效果如下：\n单行代码\ncreate database hero;\n\n代码块\nfunction fun()&#123;  echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun();\n\n\n十、流程图```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;```\n\n效果如下：\nst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;```\n\n\n本博客不支持流程图\n\n","categories":["编程教程"],"tags":["markdown"]},{"title":"【观影记录】三傻大闹宝莱坞","url":"/2022/04/22/%E3%80%90%E8%A7%82%E5%BD%B1%E8%AE%B0%E5%BD%95%E3%80%91%E4%B8%89%E5%82%BB%E5%A4%A7%E9%97%B9%E5%AE%9D%E8%8E%B1%E5%9D%9E/","content":"\n  22064b17c03cb0c0e58c99349b6889d08ea8549dd0d4c00f665b8881b304afe8\n  \n    \n      \n      \n        请输入密码.\n      \n    \n  \n\n","categories":["观影记录"],"tags":["电影","施工中"]},{"title":"【观影记录】岁月神偷","url":"/2022/04/28/%E3%80%90%E8%A7%82%E5%BD%B1%E8%AE%B0%E5%BD%95%E3%80%91%E5%B2%81%E6%9C%88%E7%A5%9E%E5%81%B7/","content":"\n  22064b17c03cb0c0e58c99349b6889d0e918231d1b5b54fbbe954408a3cd5f3fa6572acb19ab9f3a427f6f6b6a32304c037cff11c6a059782b8c9940dffa1fe0b63711043aeab1965f17057bd2b17850d977bccaa7e6e2e5a8c9cf2b8399692f831e434686d108e88108c0b4e43db9c9d0a550777670cd48e5f9584a4a6db03438ee31af77d0b28843946c7ac34e865a6a3ccf624232e44b1033d15fb21cf088bafaa40600b3340ce273fcf16533cf4cfb265b64bfb2e38fca6c3845dbb47a9920abfa99e58de550e51945bdde67586f2aa96f7b1153287c8abfbaca93953bfecfe593c161b08711a93105be06a35f59f48daa68bb779d8aca9e46dc01da8a61c62beff0cb87978206f4edfe55a68f3f7fbecce609b8e9de244427fb6120ea91f73607dcc03af0f5a40ef1cb31bf69ee927120e6060461355d2722294ab25744b4afbc3ca3d3bccca0b89cdfecf1d4f84adf3b05f1390540e800957141b911e224f0957b6631aea6ee68adb05eefb2ca6464377a8cfded7b2c7d883b26822ed004e50a95ed22a683504b8707d82b50463ed24c8b3ff879e43d9d79f8929a2f8cc961ed397a7a8a723851e21ece607e74e189ad457125a788c1c3eabdc80aadec8f6f9662321a85a79960d5eb2a520c976a609bc1c0473055ee863925b62f36082686d2d24af185f72c59298b98b2bfa368704ffb03330ce59080e841c6e753057eb482c2ab542f2eb89548e994d37d543e2a2f376d51d87d07e8ced09c8c05527117567d688fb5e445a7341a737471abc6d949b621571dbd99ac4e8a5ff69ffa23624178a671503304467aea5454eb95e582fdcfacea5988b38836405ee91ac2879795d9aec34eab552af9715e3d15054fad57631e00620198ac8b1c3e1b01c81e7f71e1ae6e1b742a4958b14409a8ebcb387d8094798c328559a0e20c7e6629b9ff3a59d15bed25b643939e027ce6a79658793b1ee3729a5b3176717e8d514d642ad29d6ff6f4896d6fa19eb34b4f737371fe4c8bb8f47a1b008f174a1f8898bda82aeae3db12da421d700c25d35c609528eb30fb0c2ecd03c557212218a69db338e1ddfcd23c3fae2a6df88036a39a13ab09dda9feaaae74fc3cd9f454d2a190f34e01ec8eb2fcbff872ca5dd6a2ecc08c7f8ee16f66841996dfba2ff71ef2bc3c29c02a8cfa5818e8eaeab514017851848fb22e2ac803b1d06cab3194f5baac2b8ab1d95210ee12a7d91edd870f2591c191a815956b7b04d9a74bbc26f3ccaf176b8a9529f8e7f10c6de7254debdf9fcb7bdf44ce97860214a5343e520d07788ee7e26481b4aa8f998af07a620a89f813556f9390f61983285e9faf2c3b43de44a7da22358446f9b249a3dbbb2fe788e3592b4ea1c13f45d10d40ab1dd4384fbdd19f1ff8c7b3269924988cdc22c4ba3c8e64a9df8c8952261732044c87d7ea40c34575035e3a55b9a84dc5a7dfdee66a4ab1661ab0ff06157c58571a00f7224c0fc5fcfbfac51bedc1b43eb554e7706494c6cee4052e813ab8ecaa3d3fd95dd5a310dbbd9af6068db9ff18e3c729074b9f91f17560b4084645e13eaa4b257dd0fcbbecb234358949c4365b40fe53b99c3fac632cf30d78dce656209e8c6ded549ef08257d7566ce827cc29ab0e3099e6049ddd8d6a3ce087996021f3387084b5665a4c33e4152fbc1bc770485523340cbef36bb2ec0f2011ff38fe20b24029ce95944be0eaee3242acea766a3f5edbca9c1df4906c2939b6462eab374c0957b8ea6ac702168fc4c2d50a12fc19ff0e98b7bd32203b166a8d62f4ea7351e49c073d5ef931c36f4aa183a504bda44adaaf094f841bda9cafac93265da2de83ecc00dbb552d72ca8e39396a7c0f5b9e7659ca9405298d76bef47fa056e94f8e17faf8a4248f1243f096fcdc7e6f24e2d41e4bceb718f982754c1dc060f944144ceb20053d54a8d3c16a4152e5b9ddec376c8ccabafe93f8bb8004e0a2d287e5b3d48f7f3fcc21f30616a9df3a4ae4d24cf216a591e1b351cbc48a8af18bf83c57f398cd4fcabf17e03ba7ad398e0161d78a5b3ace73a5c7ea2b5de20dfec1d667682bcec63bbe8bd8aab799cecdd0ce61cb893713fd4a9649c43f5dd7bc6254b85e422756b8b68b40715f0fb0b8935d42730ef52c3299ed95c9d016039de695f7ed5fe205598a57c1fa4a9c1b9abdf96e57beec9965223b881361ece140267425ab360182089d6e2549ba462ea2b5a5a8a3746f7e044ee2f19bdc3fffdb978efdd406cf90c9c9468a99be2a712e223c8359d07ff879c0f53682fcccc3390183415539b72f9b51694864abf5806923521b35a3f2fe5d7d070a47458259a29e47514a1be1094147e341d662ca13936ada0aa604f92f3f57e68caa3caadc97bebb108bdc88f59c319fabc1f7a8d54cb12bb5962d09da6421f17e86278a3bc8000a90493b6ea082d9bbdcabeb5f19ed48eadc32e0e2f439a90c0a5deda8e3a87401e32f8ce509d8708a6fd2fad44d9f5b1d07357a46c19e49d253236573e7210d119dad89c83f8645cb5d3016e47e1a1626d80d386f8115e01c7bff3ce9b12f72c97fea3ff03c22307dd4c872eb8f1e1c5d7b37c897cee95d797a832f5126fb700063eb9dd484fb4f0946972f4663106c04fc3d2b64314f35d2fef23137d85ada541f4002e885a85f4b3bdd966cfa0cd77a3dc99ef74df896e9cc49ce44d33b0934610ec92163b679005fe6b61fe6016e96fe1800589cbb9f5b44ca113727879cee9a3281d496ed465311bd4e3f1337fa38307560e6f070b741c4a054100f061e16f76087b195b4923c2d6f2cccad51d19e8774cd4bb39a3faa8975082d9cbc31b42cba4881d6d8ad77ba7465751b2cbba4\n  \n    \n      \n      \n        请输入密码.\n      \n    \n  \n\n","categories":["观影记录"],"tags":["电影","施工中"]},{"title":"【观影记录】少年派的奇幻漂流","url":"/2022/04/23/%E3%80%90%E8%A7%82%E5%BD%B1%E8%AE%B0%E5%BD%95%E3%80%91%E5%B0%91%E5%B9%B4%E6%B4%BE%E7%9A%84%E5%A5%87%E5%B9%BB%E6%BC%82%E6%B5%81/","content":"\n  22064b17c03cb0c0e58c99349b6889d0663b9d2182b581a44fe7f2e7f05bd4456006948297dd4537dc744dc5b697e9b1\n  \n    \n      \n      \n        请输入密码.\n      \n    \n  \n\n","categories":["观影记录"],"tags":["电影","施工中"]},{"title":"【观影记录】肖申克的救赎","url":"/2022/04/18/%E3%80%90%E8%A7%82%E5%BD%B1%E8%AE%B0%E5%BD%95%E3%80%91%E8%82%96%E7%94%B3%E5%85%8B%E7%9A%84%E6%95%91%E8%B5%8E/","content":"\n  22064b17c03cb0c0e58c99349b6889d0663b9d2182b581a44fe7f2e7f05bd4456006948297dd4537dc744dc5b697e9b1\n  \n    \n      \n      \n        请输入密码.\n      \n    \n  \n\n","categories":["观影记录"],"tags":["电影","施工中"]},{"title":"【观影记录】阿甘正传","url":"/2022/04/21/%E3%80%90%E8%A7%82%E5%BD%B1%E8%AE%B0%E5%BD%95%E3%80%91%E9%98%BF%E7%94%98%E6%AD%A3%E4%BC%A0/","content":"\n  22064b17c03cb0c0e58c99349b6889d0663b9d2182b581a44fe7f2e7f05bd4456006948297dd4537dc744dc5b697e9b1\n  \n    \n      \n      \n        请输入密码.\n      \n    \n  \n\n","categories":["观影记录"],"tags":["电影","施工中"]},{"title":"我的第一篇博客","url":"/2022/04/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","content":"本篇文章主要介绍hexo博客\n常用网址博客相关\nhexo官网：https://hexo.io/zh-cn/\nkeep主题官网：https://keep-docs.xpoet.cn/\npicx图片官网：https://picx.xpoet.cn/#/upload\n\n博客部署与文章更新github相关仓库\n本博客部署在 https://github.com/liuSheng0/liuSheng0.github.io\n\n分支main：用于存放github page\n分支hexo：用于存放hexo源码，防止丢失\n\n评论gitalk服务器部署在 https://github.com/liuSheng0/gitalk-save\n图床部署在 https://github.com/liuSheng0/image-hosting\n新建文章时执行如下命令\n$ hexo new [layout] &lt;title&gt;\n\n布局（layout）\nHexo 有三种默认布局：post、page 和 draft。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。\n\n\n\n布局\n路径\n\n\n\npost\nsource/_posts\n\n\npage\nsource\n\n\ndraft\nsource/_drafts\n\n\n部署文章时执行如下命令\n/* 在localhost:4000本地浏览修改 */$ hexo s/* 用于执行，清空、刷新、部署，更新main页面 */$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d\n\n若网站架构有更新，建议使用如下命令将源码存入github仓库的hexo分支\n/* 以下命令为提交源码到hexo仓库 */$ git add .$ git commit -m &quot;更新&quot;$ git checkout hexo$ git push origin hexo\n\n常用博客功能文章加密基于“ hexo-blog-encrypt”扩展实现\n\n对文章信息头使用如下关键字\n\npassword: xxx #设置密码为xxxsbstract: aaa #设置锁定时主页描述为aaamessage: bbb #设置锁定时文章信息为bbbwrong_pass_message: ccc #设置密码输入错误时信息cccwrong_hash_message: ddd #设置密码输入正确时信息ddd\n\n\n或者使用“加密”tag加密文章\n\n设置标签和分类tag: [tag1,tag2,tag3] #设置文章标签为tag1，tag2，tag3categories: cat #设置文章分类为cat\n\n置顶文章文章默认以时间顺序排列，使用sticky属性来置顶文章\nsticky: 999 #值越大文章越靠前\n\n","categories":["编程教程"],"tags":["hexo","博客"]},{"title":"【观影记录】霸王别姬","url":"/2022/04/19/%E3%80%90%E8%A7%82%E5%BD%B1%E8%AE%B0%E5%BD%95%E3%80%91%E9%9C%B8%E7%8E%8B%E5%88%AB%E5%A7%AC/","content":"\n  22064b17c03cb0c0e58c99349b6889d0663b9d2182b581a44fe7f2e7f05bd4456006948297dd4537dc744dc5b697e9b1\n  \n    \n      \n      \n        请输入密码.\n      \n    \n  \n\n","categories":["观影记录"],"tags":["电影","施工中"]},{"title":"有趣的图片","url":"/2022/04/28/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%9B%BE%E7%89%87/","content":"分享日常生活中一些有趣的图片\n\n\n\n\n\n","categories":["日常分享"],"tags":["疫情中的2022"]},{"title":"腾讯pcg客户端面经","url":"/2022/04/27/%E8%85%BE%E8%AE%AFpcg%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%9D%A2%E7%BB%8F/","content":"去年考研一战失败，被腾讯pcg喊去面试，投的腾讯pcg客户端方向，二面的时候我问面试官客户端主要工作，他告诉他是后端面试官…然后就这么凉了，二面的内容我也不太记得了，大家凑活看一下吧。\n一面1 代码题，给出一个数字，计算他拆为两个质数相加的组数。如n=10 res=2（[2,7],[5,5]）\n2 网络分层结构（应用层-&gt;传输层-&gt;网络层-&gt;数据链路层-&gt;物理层）\n3 http和https的区别，http在哪一层\n4 tcp在哪一层，三次握手，为什么要三次握手\n5 常用的STL数据结构（我答的vector）-&gt;vector数组的本质（动态数组）-&gt;vector数组如何实现动态分配的\n6 设计一个移动客户端，使得在用户关闭客户端后还可以接收到服务器发送的通知（TCP长连接/应用层实现UDP长链接）\n7 聊一聊自己的项目\n8 指出了简历中的一个项目聊了一下\n9 说一说平时都是怎么学习知识的\n10 说一说自己和身边的同学比有哪些优势\n\n下面是网上的其他面经\n腾讯pcg客户端面经作者：菜鸟要飞啊\n链接：https://www.nowcoder.com/discuss/396510?type=2\n来源：牛客网\n一面解释一下虚函数内部实现原理？ \n虚表（编译时建立，运行时覆盖）\n一个模板类在不同特化之后，得到的类还是不是同一个类？\n是\n解释一下什么叫偏特化？\nhttps://blog.csdn.net/songchuwang1868/article/details/88918175\nmalloc/free和new/delete的区别？\n区别1：类型\nmalloc/free是函数，而new/delete是关键字、操作符\n区别2：作用\nmalloc/free只是简单的进行内存的申请和释放；new/delete除了进行内存申请和释放，还会调用对象的构造函数和析构函数进行空间的初始化和清理\n区别3：参数与返回值\nmalloc/free需要手动计算申请内存的空间大小，而且返回值是void*，需要自己转换成所需要的类型\nnew/delete可以自己计算类型的大小，返回为对应的类型指针\n区别4：内存占用\nmalloc/free占用自由存储区，new/delete占用堆存储区\n如果一个类的析构函数是虚函数，那么一般是用来干嘛的？\n基类\n说一下C++中const的几种用法？\nconst在谁后面谁就不可变。const在最前面就往后挪一个判断\nconst常量与define宏定义的区别？\nconst本质是变量，但是不可修改\ndefine本质就是字符串替换\nmap的底层数据结构是什么？\n红黑树和平衡二叉树\n红黑树和平衡二叉树的区别？\n红黑树不追求完全平衡，有些时候性能更好\n哈希表的实现方法？如何解决哈希冲突？\n用C++做的后台多还是客户端多？\n说一下TCP和UDP的区别？\n1.基于连接与无连接；\n2.对系统资源的要求（TCP较多，UDP少）；\n3.UDP程序结构较简单；\n4.流模式与数据报模式\n5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。\nTCP为什么是三次握手而四次挥手？\n三次握手保障在被链接方\nHTTPS加密机制？\n证书-&gt;key\n什么叫死锁？死锁产生的条件？\n多个进程在运行过程中因争夺资源\n1 互斥条件\n2 请求保持\n3 不剥夺\n4 循环等待\n进程间通信有哪些方法？\n管道（有名无名）\nSocket套接字\n信号和信号量\n消息队列\n共享内存\n管道pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。\n命名管道FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。\n消息队列MessageQueue：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。\n共享存储SharedMemory：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。\n信号量Semaphore：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\n套接字Socket：套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。\n信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。\nsocket创建出来后，默认是什么模式？\n阻塞模式\n用户态和内核态的区别？\n内核态与用户态是操作系统的两种运行级别，当程序运行在3级特权级上时，就可以称之为运行在用户态。因为这是最低特权级，是普通的用户进程运行的特权级，大部分用户直接面对的程序都是运行在用户态；\n当程序运行在0级特权级上时，就可以称之为运行在内核态。\n运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。当我们在系统中执行一个程序时，大部分时间是运行在用户态下的，在其需要操作系统帮助完成某些它没有权力和能力完成的工作时就会切换到内核态（比如操作硬件）。\n这两种状态的主要差别是\n处于用户态执行时，进程所能访问的内存空间和对象受到限制，其所处于占有的处理器是可被抢占的\n处于内核态执行时，则能访问所有的内存空间和对象，且所占有的处理器是不允许被抢占的。\n算法题–寻找一个无序数组的中位数\n快排\n最小堆\n算法题–在二叉树中寻找任意两个结点的最近公共结点\n深度优先\n设计一个LRU的缓存？\nLRU最近最久未使用\n1 数组+时间戳\n2 链表+hashmap+更新头部舍弃尾部\n讲一下云台项目的运行机制？\n\n二面毕业后工作的地方倾向于哪里？\n说一下哈希表？\n数组，散列函数\n如果有哈希冲突的话如何处理？\n1 开放定址法:按照一定规则向其它地址探测,直到遇到空桶.比如线性探测,假如现在的索引是3,3有值就向4探测,如果还有就继续向下,还比如平方探测.就是1 2 3 …的平方进行探测.\n2:再哈希法,设计多个哈希函数\n3:链地址法,HashMap就是这样操作的\n什么是平衡二叉树？当有节点发生变化的时候它会怎么样？\n高度相差小于2，做平衡\nmap和set底层的数据结构？\n红黑树\n红黑树的查找效率是怎样的？解释一下为什么是这样？\nlogn平均，最大2logn\nvector中erase()和remove()的区别？\n介绍一下TCP的滑动窗口？\n连续传输一组数据不用等待ack。快速重传。\nHTTPS为什么比较安全？\n证书，加密\n为什么可以用公钥加密，用私钥解密呢？背后的技术原理？\nRSA算法 大素数\n用户态和核心态？内核态一般可以做什么？有没有做过内核态的调试？\n进程管理\n有没有做过内存泄漏的追查？怎么做？\nValgrind: Debugging and profiling Linux programs, aiming at programs written in C and C++\nccmalloc: Linux和Solaris下对C和C++程序的简单的使用内存泄漏和malloc调试库\nLeakTracer: Linux、Solaris和HP-UX下跟踪和分析C++程序中的内存泄漏\nElectric Fence: Linux分发版中由Bruce Perens编写的malloc()调试库\nLeaky: Linux下检测内存泄漏的程序\nDmalloc: Debug Malloc Library\nMEMWATCH: 由Johan Lindh编写，是一个开放源代码C语言内存错误检测工具，主要是通过gcc的precessor来进行\nKCachegrind: A visualization tool for the profiling data generated by Cachegrind and Calltree\nTCP断开连接是几次挥手？为什么？\n4次\n有什么问题吗？\n可以实习多久？\n\n腾讯CSIG一面1.自我介绍\n2.项目优化\n3.线程池和多线程编程\n4.内存泄漏\n5.垃圾回收算法\n6.http和https，加密过程\n7.TCP三次握手和四次挥手\n8.TCP的time_wait\n9.生产者消费者，使用什么数据结构存储资源\n10.翻转链表（没写出来，我想找个班上了）\n11.对于转客户端有什么学习的计划\n12.实习时间和时长\n\n腾讯PCG客户端作者：牛客815852018号\nhttps://www.nowcoder.com/discuss/630418?channel=-1&amp;source_id=community_index_nctrack\n来源：牛客网\n一面视频面试（1h30min）：\n挑一个简历里的项目介绍\n问了问开发环境\nSTL Array List区别\nnew, malloc区别\n汇编语言/C++内存结构 函数A call 函数B过程\n虚函数\n虚函数怎么运作的（虚函数表）\n空类包含什么函数\n对象的copy函数怎么运作的\n线程进程区别\n线程进程交流\nTCP/UDP 区别\nC++11特性\n智能指针介绍\n各种树的特点，底层实现\n死锁/例子\n快排思想及时间复杂度\n算法：\n一个无序数组找中位数\n写代码：\nLeetcode 415\n拓展问了一下这道题如果换成减法是怎么实现的\n大部分概念题都答出来了，写代码的题有两个笔误一直没发现是提醒后修改的。面完官网就变复试\n\n二面电话面试（40min）：\n自我介绍\n项目简介\n进程之间如何交流，各有什么优缺点\n介绍一下各种搜索树\n平衡二叉树旋转\n数据库引索用的是什么树\n数据库索引怎么实现，高效么\nmd5算法介绍，怎么实现\nstrcpy安全隐患，有什么好的替代\n本地客户端使用html源码安全隐患\nHTTPS加密具体过程\nTCP/UDP 发出一个大包有什么区别\n哈希冲突 （要求说出三种方案）\n开放定址\n再哈希法\n哈希链表\n算法：\n一个无序数组找中位数 （没错就是和一面一样的问题，但我用了一面的回答面试官直接要求让我想一个复杂度更低的orz）\n腾讯pcg作者：徐201903212006771\n链接：https://www.nowcoder.com/discuss/436432?channel=-1&amp;source_id=discuss_terminal_discuss_sim_nctrack\n来源：牛客网\n一面时间：2020.05.22     面试时长：1h\n1.自我介绍\n2.笔试题1：删除无序链表中的重复结点（能否优化）\n例：输入3 -&gt; 2 -&gt; 4 -&gt; 3 -&gt; 5 输出3 -&gt; 2 -&gt; 4 -&gt; 5\n解释：3结点重复，将第二个’3’结点删除（这边的重复指的是结点的值重复）\n3.笔试题2：先说一下二叉树的有哪些遍历方法。写一个二叉树前序遍历的非递归形式。\n4.讲一下Java的内存。\n5.创建一个字符串对象，这个对象分配在哪里？\n6.String str = “123” + “456”;会创建几个对象。\n7.问了操作系统的问题，没学过，所以也忘了问了什么。\n8.数据存储有学过吗？数据库和文件保存有什么区别？\n9.Activity有哪些启动模式？\n显式启动\n隐式启动\n直接通过包名启动apk\n10.有什么要问的？\n\n二面时间：2020.05.23     面试时长：1h\n1.上一轮面试做了哪2到面试题？\n2.会哪些编程语言？\n3.想做哪个方向？为什么？Android\n4.对Android比较感兴趣，都学了些什么？我答了活动的启动模式、Handler。\n5.ListView源代码有看过吗？没看过。\n6.想一下ListView应该是怎么实现的？链表？\n\\7. ListView滑动页面如何实现页面的复用？队列？后来经过面试官的引导，有了思路。一开始往下滑，为了不影响用户体验，下面的数据，需要先预加载，这样往下滑的时候，就可以快速地显示内容。如果往下滑了之后，又想要往上滑，采用移出页面的内容，就把相应的数据销毁掉，等需要再显示的时候重新加载，比较费时；可以在一开始往下滑的时候，移出页面的内容，将相应的UI数据（不是实际的内容数据，这个一直在存储空间中）压到一个栈里面，等要往回滑的时候，再出栈，恢复数据，这样就比较快。因此在做滑动页面的操作的时候，需要上下预留出一定量的项的数据，超过这个量，再把这些数据释放掉，具体需要留多少，一个是跟页面能显示多少有关，可以通过大量测试，看看多少比较合适。还跟用户的使用习惯有关，动态调节，可以引入机器学习的方法。\n8.给你2个线程，如何产生死锁？为什么会产生死锁？\n9.外存有一定量的数据，需要读取到内存中处理，但是内存的大小是不知道的，要求如何能够读取尽量少的次数，才能处理完全部的数据？\n核心是试探内存的大小，假如要处理100M、数据\n思路一：先用一个较小的数，比如1M的数据，看看内存能不能存得下，可以的话，2M，可以，4M，……如此指数增长地尝试，希望能找出一个比较大地和内存容量比较接近的值。假如得到了内存的大概大小，然后每次就以这个数来读取外存的数据，读取次数应该会比较少。\n思路二：和思路一类似，不同的是一开始选的数偏大，比如5M，然后每次按固定值增长，即线性增长。后面的操作就类似了。\n思路三：从大往小试探，先看50M能不能存得下，不行25M，可以37M，每次处理37M，3次就够了。\n假如内存分成了50M、25M、10M、5M，如何找到第65M内存？\n\\10.  实习想要达到什么样的期望？基础能力得提升，想能独立做出几个App。\n\\11.  如何达到你得期望？基础要扎实，看安卓源代码，在实际场景中做练习。想要在多少时间达到这样一个目标？实习完，能独立开发几个应用；正式入职，深入了解安卓，新发布的技术也要及时了，工作个1-2年，看看能不能当个小组leader。\n在这方面花更多精力，学新知识，不断解决问题、总结，遇到问题向同事请教，成长更快。\n\\12.  有看过Github得源码吗？\n\\13.  提问环节：问了面试官是做什么方向的？做了很多方向。\n\\14.  还问了Kotlin在公司的普及度，现在是否有必要学习？现在主要还是以Java为主，少数也在做，毕竟Java沉淀了这么多年。所以还是Java方面先学好。\n\\15.  自己选方向，还是分配方向？比较想做安卓。都做了哪些努力？看书、看博客。\n\\16.  周围有同学投腾讯的吗？有做客户端、前端的吗？\n","categories":["面试经验"],"tags":["面试","客户端","开发"]}]